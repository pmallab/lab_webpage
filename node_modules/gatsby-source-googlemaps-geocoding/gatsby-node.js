"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fetch = require('node-fetch');

var queryString = require('query-string');

var uuidv4 = require('uuid/v4');

exports.sourceNodes =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref, configOptions) {
    var actions, createNodeId, createContentDigest, createNode, processLocation, apiUrl, response, data, nodeData;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            actions = _ref.actions, createNodeId = _ref.createNodeId, createContentDigest = _ref.createContentDigest;
            createNode = actions.createNode;
            delete configOptions.plugins;

            processLocation = function processLocation(location) {
              var nodeId = createNodeId(`location-data-${uuidv4()}`);
              var nodeContent = JSON.stringify(location);
              var nodeData = Object.assign({}, location, {
                id: nodeId,
                parent: null,
                children: [],
                internal: {
                  type: 'LocationData',
                  content: nodeContent,
                  contentDigest: createContentDigest(location)
                }
              });
              return nodeData;
            };

            apiUrl = `https://maps.googleapis.com/maps/api/geocode/json?${queryString.stringify(configOptions)}`;
            _context.next = 7;
            return fetch(apiUrl);

          case 7:
            response = _context.sent;
            _context.next = 10;
            return response.json();

          case 10:
            data = _context.sent;
            nodeData = processLocation(data);
            createNode(nodeData);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();